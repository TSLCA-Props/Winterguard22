{
	"info": {
		"_postman_id": "2861de7a-d63c-40eb-b7f4-5c6f489dd3d7",
		"name": "vlc-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Play testvid.mov",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=testvid.mov",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "testvid.mov"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Pause",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/pause",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"pause"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?time=00:00:30.0",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "time",
							"value": "00:00:30.0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position percent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?percent=0.90",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "percent",
							"value": "0.90"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Stop VLC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/stop",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"stop"
					]
				}
			},
			"response": []
		},
		{
			"name": "List media files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Array has more zero values\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.greaterThan(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/list",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get VLC Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"State is Stopped\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.state).to.eql(\"Stopped\");\r",
							"});\r",
							"\r",
							"pm.test(\"File is testvid.mov\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.file).to.contain(\"testvid.mov\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/status",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Play banksy001.gif",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy001.gif",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy001.gif"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play banksy022.jpg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy022.jpg",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy022.jpg"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play banksy022.jpg - start=true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy022.jpg&start=true",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy022.jpg"
						},
						{
							"key": "start",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play banksy022.jpg - start=false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy022.jpg&start=false",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy022.jpg"
						},
						{
							"key": "start",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play failure -- no parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"No file name provided\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/play');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					]
				}
			},
			"response": []
		},
		{
			"name": "Play failure -- missing media",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.contain(\"File does not exist media\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/play');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=xxxxx",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "xxxxx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- no parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"No Position or time provided\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- time bad format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"time data '01.02' does not match format '%H:%M:%S.%f'\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?time=01.02",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "time",
							"value": "01.02"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- time longer than media",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"Time provided greater than media length\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?time=23:59:59.9",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "time",
							"value": "23:59:59.9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- position > 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"Position must be between 0 and 1.00\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?percent=1.1",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "percent",
							"value": "1.1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- position < 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"Position must be between 0 and 1.00\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?percent=-0.1",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "percent",
							"value": "-0.1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Position failure-- unknown parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"Unknown parameter: something\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/position');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/position?something=xxx",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"position"
					],
					"query": [
						{
							"key": "something",
							"value": "xxx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play failure - Unknown parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"Unknown parameter: something\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/play');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy001.gif&something=xxx",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy001.gif"
						},
						{
							"key": "something",
							"value": "xxx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Play failure - bad start value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Json error body\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.error).to.eql(\"start parameter must be equal true or false.  Input was xxx\");\r",
							"  pm.expect(responseJson.path).to.eql('/api/v1/play');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{host}}:5000/api/v1/play?file=banksy001.gif&start=xxx",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"play"
					],
					"query": [
						{
							"key": "file",
							"value": "banksy001.gif"
						},
						{
							"key": "start",
							"value": "xxx"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "127.0.0.1"
		}
	]
}